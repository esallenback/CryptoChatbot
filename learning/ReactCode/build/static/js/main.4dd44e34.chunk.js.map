{"version":3,"sources":["logo.svg","components/HistoryItem.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HistoryItem","className","this","props","question","answer","Component","Search","handleSearchChange","event","setState","usersearch","target","value","handleSubmit","search","state","url","URL","params","query","Object","keys","forEach","key","searchParams","append","qAndA","history","concat","fetch","then","response","a","text","botResponse","preventDefault","clearSearch","historyElements","entries","index","itemClass","push","onSubmit","id","type","placeholder","onChange","size","map","i","App","style","height","marginTop","src","logoimg","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,2QC0B5BC,G,6KATP,OACI,yBAAKC,UAAU,gBACX,uBAAGA,UAAU,YAAYC,KAAKC,MAAMC,UACpC,uBAAGH,UAAU,UAAUC,KAAKC,MAAME,a,GAhBxBC,cC6FXC,G,wDAxFX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IAQVK,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CACVC,WAAYF,EAAMG,OAAOC,SAXd,EAenBC,aAAe,SAACL,GACZ,IAAIM,EAAS,EAAKC,MAAML,WAGpBM,EAAM,IAAIC,IAvBE,2EAwBZC,EAAS,CAACC,MAAO,EAAKJ,MAAML,YAChCU,OAAOC,KAAKH,GAAQI,SAAQ,SAAAC,GAAG,OAAIP,EAAIQ,aAAaC,OAAOF,EAAKL,EAAOK,OAEvE,IAAIG,EAAQ,CAACZ,EAAQ,MAErB,EAAKL,SAAS,CACVkB,QAAS,EAAKZ,MAAMY,QAAQC,OAAO,CAACF,IACpChB,WAAY,KAGhBmB,MAAMb,GAAKc,KAAX,uCAAgB,WAAOC,GAAP,eAAAC,EAAA,sEACYD,EAASE,OADrB,OACRC,EADQ,OAEZR,EAAM,GAAKQ,EACX,EAAKzB,SAAS,CACVkB,QAAS,EAAKZ,MAAMY,UAJZ,2CAAhB,uDAQAnB,EAAM2B,kBAtCS,EAyCnBC,YAAc,WACV,EAAK3B,SAAS,CACVC,WAAY,MAxChB,EAAKK,MAAQ,CACRL,WAAY,GACZiB,QAAS,IALC,E,4DAgDf,IADY,EACRU,EAAkB,GADV,cAEiBpC,KAAKc,MAAMY,QAAQW,WAFpC,IAEZ,2BAA2D,CAAC,IAAD,yBAA/CC,EAA+C,KAAxC3B,EAAwC,KACnD4B,EAAYD,EAAQ,IAAM,EAAI,eAAiB,eACnDF,EAAgBI,KACZ,uBAAGlB,IAAKgB,EAAOvC,UAAWwC,GACpB5B,KANF,8BAWZ,OACI,yBAAKZ,UAAU,WACVqC,K,+BAMT,OACI,yBAAKrC,UAAU,aACX,0BAAM0C,SAAYzC,KAAKY,aAAc8B,GAAG,eAChC,2BAAO3C,UAAU,aACb4C,KAAO,OACPC,YAAc,qCACdjC,MAASX,KAAKc,MAAML,WACpBoC,SAAY7C,KAAKM,qBAGzB,4BAAQP,UAAU,gBAAgB4C,KAAK,SAASG,KAAK,MAArD,aAEJ,yBAAK/C,UAAU,WACVC,KAAKc,MAAMY,QAAQqB,KAAI,SAACtB,EAAOuB,GAAR,OACpB,kBAAC,EAAD,CAAa1B,IAAK0B,EAAG9C,SAAUuB,EAAM,GAAItB,OAAQsB,EAAM,c,GAlF1DrB,c,yBCUN6C,E,uKATX,OACE,yBAAKlD,UAAU,OACb,yBAAKmD,MAAO,CAAEC,OAAQ,QAASC,UAAW,IAAKC,IAAOC,IAASC,IAAI,wBACnE,kBAAC,EAAD,W,GALUnD,aCMEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4dd44e34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2ec09a56.svg\";","import React, { Component } from 'react'\n// import Button from 'react-bootstrap/Button';\nimport './HistoryItem.css';\n\nclass HistoryItem extends Component {\n\n    // constructor(props) {\n    //     super(props)\n    \n    //     // this.state = {\n    //     //      question: props.question,\n    //     //      answer: props.answer,\n    //     //     //  key: props.key\n    //     // }\n    // }\n    \n    render() {\n        return (\n            <div className=\"history-item\">{/*key={this.state.key}>*/}\n                <p className=\"question\">{this.props.question}</p>\n                <p className=\"answer\">{this.props.answer}</p>\n            </div>\n        )\n    }\n}\n\nexport default HistoryItem\n","import React, { Component } from 'react'\nimport HistoryItem from './HistoryItem';\n// import Button from 'react-bootstrap/Button';\nimport './Search.css';\n\nconst AWS_CHATBOT_URL = \"https://0em9qqgkb3.execute-api.us-east-1.amazonaws.com/default/chatbot3\";\n\nclass Search extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             usersearch: '',\n             history: []\n        }\n    }\n\n    handleSearchChange = (event) => {\n        this.setState({\n            usersearch: event.target.value,\n        })\n    }\n\n    handleSubmit = (event) => {\n        let search = this.state.usersearch;\n        // let result = \"The user searched for \" + search;\n        \n        let url = new URL(AWS_CHATBOT_URL),\n            params = {query: this.state.usersearch}\n        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n\n        let qAndA = [search, null];\n\n        this.setState({\n            history: this.state.history.concat([qAndA]),\n            usersearch: ''\n        });\n\n        fetch(url).then(async (response) => {\n            let botResponse = await response.text();\n            qAndA[1] = botResponse;\n            this.setState({\n                history: this.state.history\n            });\n        })\n        \n        event.preventDefault()\n    }\n\n    clearSearch = () => {\n        this.setState({\n            usersearch: \"\"\n        })\n    }\n\n    renderHistory() {\n        let historyElements = [];\n        for (const [index, value] of this.state.history.entries()) {\n            let itemClass = index % 2 === 0 ? 'search-entry' : 'result-entry';\n            historyElements.push(\n                <p key={index} className={itemClass}>\n                    { value }\n                </p>\n            );\n        }\n\n        return (\n            <div className=\"history\">\n                {historyElements}\n            </div>\n        )\n    }\n    \n    render() {\n        return (\n            <div className=\"container\">\n                <form onSubmit = {this.handleSubmit} id=\"search-form\">\n                        <input className=\"search-box\"\n                            type = 'text' \n                            placeholder = \"Search for your favorite crypto...\"\n                            value = {this.state.usersearch}\n                            onChange = {this.handleSearchChange}\n                        />\n                        {/* <button type=\"reset\" onClick = {this.clearSearch}>x</button> */}\n                    <button className=\"search-button\" type=\"submit\" size=\"lg\"> Search </button>\n                </form>\n                <div className=\"history\">\n                    {this.state.history.map((qAndA, i) =>\n                        <HistoryItem key={i} question={qAndA[0]} answer={qAndA[1]} />\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Search\n","import React, {Component} from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport logoimg from './logo.svg';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <img style={{ height: '100px', marginTop: 25}} src = {logoimg} alt=\"Crypto Current Logo\"/>\n        <Search />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}